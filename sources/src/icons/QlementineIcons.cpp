// MIT License
//
// Copyright (c) 2023 Olivier Clero
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <oclero/qlementine/icons/QlementineIcons.hpp>

#include <mutex>
#include <unordered_map>

#include <qglobal.h>
#include <QIcon>

// This must be done outside of any namespace.
void qlementineIconThemeInitialization() {
  // Loads the QRC content.
  // --- This part is generated by scripting. Don't modify.
  Q_INIT_RESOURCE(qlementine_icons_action);
  Q_INIT_RESOURCE(qlementine_icons_audio);
  Q_INIT_RESOURCE(qlementine_icons_brand);
  Q_INIT_RESOURCE(qlementine_icons_document);
  Q_INIT_RESOURCE(qlementine_icons_file);
  Q_INIT_RESOURCE(qlementine_icons_hardware);
  Q_INIT_RESOURCE(qlementine_icons_instruments);
  Q_INIT_RESOURCE(qlementine_icons_media);
  Q_INIT_RESOURCE(qlementine_icons_misc);
  Q_INIT_RESOURCE(qlementine_icons_navigation);
  Q_INIT_RESOURCE(qlementine_icons_page);
  Q_INIT_RESOURCE(qlementine_icons_shape);
  Q_INIT_RESOURCE(qlementine_icons_shopping);
  Q_INIT_RESOURCE(qlementine_icons_software);
  Q_INIT_RESOURCE(qlementine_icons_text);
  // ---

  // Registers the icon theme.
  QIcon::setFallbackSearchPaths(QIcon::fallbackSearchPaths() << ":qlementine/icons");
}

namespace oclero::qlementine::icons {
std::once_flag qlementineOnceFlag;

std::unordered_map<QString, QString> freeDesktopMapping{
  // clang-format off
  { "edit-undo", "undo" },
  { "edit-redo", "redo" },
  // clang-format on
};

void initializeIconTheme() {
  std::call_once(qlementineOnceFlag, qlementineIconThemeInitialization);
}

QString fromFreeDesktop(const QString& freeDesktopName) {
  const auto it = freeDesktopMapping.find(freeDesktopName);
  return it != freeDesktopMapping.end() ? it->second : QString();
}
} // namespace oclero::qlementine::icons
